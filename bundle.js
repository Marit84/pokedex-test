!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";function o(n){var e,t=n.url.split("/")[6];return`\n                            <div class="pokemonCard" id="${t}">\n                                <img src="${function(n){return`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/shiny/${n}.gif`}(t)}"/>\n                                <h3>${e=n.name,e[0].toUpperCase()+e.slice(1).toLowerCase()}</h3>\n                            </div>\n                        `}t.r(e);var r=document.getElementById("main"),i=0;function u(n){var e;(e=n,fetch("https://pokeapi.co/api/v2/pokemon/"+e).then((function(n){return n.json()}))).then((function(n){r.innerHTML=function(n){return`\n                   \n                   <h1>${n.name} is ${n.height} tall</h1>\n                   <h2>${n.name} is a ${n.types[0].type.name}-type</h2> \n                   <button id="back">Back</button>\n                   <button id="next">Next</button>\n                   <div>\n                   <img src="${n.sprites.other.dream_world.front_default}">\n                   </div>\n                   <div>\n                       <img src="${n.sprites.front_default}">\n                       </div>\n                   `}(n),document.getElementById("back").addEventListener("click",(function(){c()}))})).catch((function(n){r.innerHTML="\n                    <h1>Error loading page</h1>"}))}function c(n,e){r.innerHTML="\n                <h3>Loading pokemons...</h3>\n                ",function(n,e){return fetch(`https://pokeapi.co/api/v2/pokemon?limit=${e}&offset=${n*e}`).then((function(n){return n.json()})).then((function(n){return n.results}))}(n,e).then((function(n){r.innerHTML=function(n,e,t){return`\n            <h1>My Pokemons</h1>\n    ${0==e?"":'<button id="prew">Previous</button>'} \n${(e+1)*t>=151?"":'<button id="next">Next</button>'}\n                        <div id="pokemonList">\n                            ${n.map(o).join("")} \n                            </div>\n                    `}(n,i,e);var t=document.getElementById("prew");t&&t.addEventListener("click",(function(){c(--i,e)}));var a=document.getElementById("next");a&&a.addEventListener("click",(function(){c(++i,e)})),document.getElementById("pokemonList").childNodes.forEach((function(n){n.addEventListener("click",(function(n){u(n.currentTarget.id)}))}))})).catch((function(n){console.log(n),r.innerHTML="\n                    <h1>Error loading page</h1>"}))}r.innerHTML='\n                    <h1>My Pokedex </h1>\n                    <button id="view">View pokemons</button>\n                    ',document.getElementById("view").addEventListener("click",(function(){c(i,20)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,